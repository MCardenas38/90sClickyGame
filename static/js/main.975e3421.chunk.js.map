{"version":3,"sources":["components/Card.js","components/Jumbo.js","components/Nav.js","components/Array.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","check_answer","id","src","alt","Jumbo","Fragment","style","paddingTop","Nav","color","message","current","high","Array","picked","Game","state","current_score","high_score","stored_cards","console","log","temp","_this","setState","shuffle","i","length","array","sort","Math","random","_this2","this","components_Nav","components_Jumbo","map","card","index","components_Card","React","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.975e3421.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"title_card\" onClick={() => { props.check_answer(props.id) }}>\r\n            <img className=\"pic-card\" src={props.src} alt=\"\"></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Jumbo(){\r\n    return(\r\n        <>\r\n        <div className=\"card bg-dark text-white\">\r\n            <img className=\"head card-img\" src=\"https://ak1.picdn.net/shutterstock/videos/1016011171/thumb/1.jpg\"  alt=\"\"/>\r\n            <div className=\"card-img-overlay centered box\">\r\n                <h1 className=\"text_head\" style={{paddingTop: \"50px\"}}>The Clicky Game!</h1>\r\n                <h5 className=\"text_head\">Directions: Click any unique image. Choosing a previous\r\n                    image will result in a Game Over.\r\n                </h5>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Jumbo;","import React from \"react\";\r\n\r\nfunction Nav(props){\r\n    return(\r\n        <ul className=\"nav justify-content-center\">\r\n            <li className=\"nav-item\">\r\n                <h4 className=\"nav-link\" style={{color: \"white\"}}>Clicky Game</h4>\r\n            </li>\r\n            <li className=\"nav-item\" >\r\n                <h4 className=\"nav-link\" style={{color: \"white\"}}>{props.message}</h4>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <h4 className=\"nav-link\" style={{color: \"white\"}}>Current Score {props.current} | High Score {props.high}</h4>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Nav;","var Array= [\r\n    {\r\n        src: \"../../images/angelica.png\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/arnold.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/cyborg.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/deedee.png\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/dexter.png\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/helga.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/patrick.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/robin.png\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/rocko.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/spongebob.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/spunky.jpg\",\r\n        picked: false,\r\n    },\r\n    {\r\n        src: \"../../images/tommy.jpg\",\r\n        picked: false,\r\n    }\r\n];\r\n\r\nexport default Array;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport Jumbo from \"./Jumbo\";\r\nimport Nav from \"./Nav\";\r\nimport Array from \"./Array\";\r\n\r\nclass Game extends React.Component{\r\n    \r\n    state= {\r\n        current_score: 0,\r\n        high_score: 0,\r\n        stored_cards: Array,\r\n        message: \"Welcome, please click an image to start!\"\r\n    }\r\n\r\n    check_answer= id =>{\r\n        console.log(id);\r\n       let temp= this.state.stored_cards;\r\n       if(temp[id].picked === false){\r\n           temp[id].picked = true;\r\n           let current= this.state.current_score + 1;\r\n           let high= this.state.high_score;\r\n\r\n            if(current >= high){\r\n                this.setState({\r\n                    stored_cards: this.shuffle(temp),\r\n                    current_score: current,\r\n                    high_score: current,\r\n                    message: \"You Guessed Correctly\"\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    stored_cards: this.shuffle(temp),\r\n                    current_score: current,\r\n                    message: \"You Guessed Correctly\"\r\n                });\r\n            }\r\n       }\r\n       else{\r\n            for(let i= 0; i<temp.length;i++){\r\n                temp[i].picked= false;\r\n            }\r\n            this.setState({\r\n                stored_cards: this.shuffle(temp),\r\n                current_score: 0,\r\n                message: \"You Guess Incorrectly, Try Again\"\r\n            });\r\n            console.log(this.state.stored_cards);\r\n       }\r\n    }\r\n\r\n    shuffle= array =>{\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Nav \r\n                    message= {this.state.message}\r\n                    current= {this.state.current_score}\r\n                    high= {this.state.high_score}\r\n                />\r\n            <Jumbo />\r\n            <div className= \"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.state.stored_cards.map((card, index) =>{\r\n                        return(\r\n                            <Card \r\n                                id= {index}\r\n                                src= {card.src}\r\n                                check_answer= {this.check_answer}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}